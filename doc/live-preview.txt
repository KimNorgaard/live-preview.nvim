================================================================================
LIVE-PREVIEW                                                      *live-preview*

Live preview for markdown, asciidoc, and html files. These are functions for
setting up, starting, and stopping the live preview server.

M.stop_preview()                                 *live-preview.stop_preview()*
    Stop live preview



M.preview_file({filepath}, {port})               *live-preview.preview_file()*
    Start live preview


    Parameters: ~
        {filepath} (string)  path to the file 
        {port}     (number)  port to run the server on


M.setup({opts})                                         *live-preview.setup()*
    Setup live preview


    Parameters: ~
        {opts} (table)



================================================================================
SERVER                                                     *live-preview.server*

Functions for http and websocket server.

M.generate_etag({file_path})             *live-preview.server.generate_etag()*
    Generate an ETag for a file


    Parameters: ~
        {file_path} (string)  path to the file

    Return: ~
        string: ETag for the file


M.get_content_type({file_path})       *live-preview.server.get_content_type()*
    Get the content type of a file


    Parameters: ~
        {file_path} (string)  path to the file

    Return: ~
        string: content type of the file (MIME type)


M.send_http_response({client}, {status}, {content_type}, {body}, {headers}) *live-preview.server.send_http_response()*
    Send an HTTP response to the client


    Parameters: ~
        {client}       (uv.TCP)  client connection
        {status}       (string)  HTTP status code
        {content_type} (string)  MIME type of the response
        {body}         (string)  response body
        {headers}      (table)   additional headers to send


M.websocket_handshake({client}, {request}) *live-preview.server.websocket_handshake()*
    Handle a WebSocket handshake request


    Parameters: ~
        {client}  (uv.TCP)  client connection
        {request} (string)  HTTP request


M.handle_request({client}, {request})   *live-preview.server.handle_request()*
    Handle an HTTP request


    Parameters: ~
        {client}  (uv.TCP)  client connection
        {request} (string)  HTTP request


M.handle_client({client})                *live-preview.server.handle_client()*
    Handle a client connection, read the request and send a response


    Parameters: ~
        {client} (uv.TCP)  client connection


M.websocket_send({client}, {message})   *live-preview.server.websocket_send()*
    Send a message to a WebSocket client


    Parameters: ~
        {client}  (uv.TCP)  client connection
        {message} (string)  message to send


M.watch_dir({dir}, {client})                 *live-preview.server.watch_dir()*
    Watch a directory for changes and send a message to a WebSocket client


    Parameters: ~
        {dir}    (string)  path to the directory
        {client} (uv.TCP)  client connection


M.start({ip}, {port}, {options})                 *live-preview.server.start()*
    Start the server

    For example: require('live-preview.server').start('localhost', 8080,
    {webroot = '/path/to/webroot'})


    Parameters: ~
        {ip}      (string)
        {port}    (number)
        {options} (table)


M.stop()                                          *live-preview.server.stop()*
    Stop the server




================================================================================
UTILS                                                       *live-preview.utils*

Utility functions for live-preview.nvim. ]]

M.get_plugin_path()                     *live-preview.utils.get_plugin_path()*
    Get the path where live-preview is installed




M.uv_read_file({file_path})                *live-preview.utils.uv_read_file()*
    Read a file using libuv


    Parameters: ~
        {file_path} (string)


M.get_path_lua_file()                 *live-preview.utils.get_path_lua_file()*
    Get the path of the current lua file




M.term_cmd({cmd})                              *live-preview.utils.term_cmd()*
    Execute a shell commands


    Parameters: ~
        {cmd} (string)

    Return: ~
        table: a table with fields code, stdout, stderr, signal


M.await_term_cmd({cmd})                  *live-preview.utils.await_term_cmd()*
    Execute a shell command and wait for the exit


    Parameters: ~
        {cmd} (string)

    Return: ~
        table: a table with fields code, stdout, stderr, signal


M.sha1({val})                                      *live-preview.utils.sha1()*
    Compute the SHA1 hash of a string. Source :
    https://github.com/glacambre/firenvim/blob/master/lua/firenvim/firenvim-utils.lua


    Parameters: ~
        {val} (string)

    Return: ~
        string: SHA1 hash


M.open_browser({path}, {browser})          *live-preview.utils.open_browser()*
    Open URL in the browser


    Parameters: ~
        {path}    (string)
        {browser} (string)


M.kill_port()                                 *live-preview.utils.kill_port()*
    Kill a process which is not Neovim running on a port




================================================================================
HEALTH                                                     *live-preview.health*

To run health check for Live Preview, run

>lua

:checkhealth live-preview

<. This will check if your Neovim version is compatible with Live Preview and
if the commands to open browser are available.


